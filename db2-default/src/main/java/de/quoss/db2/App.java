package de.quoss.db2;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

public class App {

    private void run() throws Exception {
        // System.out.format("Value of SYSIBM.DSQEC_RUN_MQ: %s%n", executeSql(
        //         "select SYSIBM.DSQEC_RUN_MQ from sysibm.sysdummy1"));
        try {
            System.out.format("Drop table testdb.customer: %s%n", executeSql("drop table testdb.customer"));
        } catch (final SQLException e) {
            if ("42704".equals(e.getSQLState())) {
                System.out.format("Table testdb.customer does not exist.%n");
            } else {
                throw e;
            }
        }
        System.out.format("Create table testdb.customer: %s%n", executeSql(
                "create table testdb.customer (id int not null generated by "
                + "default as identity primary key, name varchar(200))"));
        // System.out.format("%s%n", executeSql("select * from sysibm.systables"));
        System.out.format("Insert data into table testdb.customer: %s%n",
                executeSql("insert into testdb.customer (name) values "
                + "('Clemens Quoß')"));
        System.out.format("Insert data into table testdb.customer: %s%n", 
                executeSql("insert into testdb.customer (name) values "
                + "('Barbara Quoß')"));
        System.out.format("Select data from table testdb.customer: %s%n", 
                executeSql("select * from testdb.customer"));
    }
    
    private List<List<Map<String, Object>>> executeSql(final String sql) throws SQLException {
        try (final Connection connection = DriverManager.getConnection("jdbc:db2://localhost:50000/testdb", "db2inst1", "db2inst1");
                final Statement statement = connection.createStatement()) {
            final List<List<Map<String, Object>>> results = new LinkedList<>();
            final List<Map<String, Object>> result = new LinkedList<>();
            if (statement.execute(sql)) {
                handleSelect(statement, result);
            } else {
                result.add(handleUpdate(statement));
            }
            if (!result.isEmpty()) {
                results.add(result);
            }
            // FIXME multiple results do not work, using a semicolon in sql string 
            //   leads to sqlcode -104, sqlstate 42601.
            //   -> select * from testdb.customer; select * from testdb.customer
            //   => Exception in thread "main" com.ibm.db2.jcc.am.SqlSyntaxErrorException:
            //      DB2 SQL Error: SQLCODE=-104, SQLSTATE=42601, 
            //      SQLERRMC=;;from testdb.customer;UNION, DRIVER=4.33.31
            boolean moreResults = true;
            while (moreResults) {
                final List<Map<String, Object>> nextResult = new LinkedList<>();
                if (statement.getMoreResults()) {
                    handleSelect(statement, result);
                } else {
                    int updateCount = statement.getUpdateCount();
                    if (updateCount == -1) {
                        moreResults = false;
                    } else {
                        nextResult.add(handleUpdate(statement));
                    }
                }
                if (!nextResult.isEmpty()) {
                    results.add(nextResult);
                }
            }
            if (results.isEmpty()) {
                return Collections.emptyList();
            }
            return Collections.unmodifiableList(results);
        }
    }
    
    private Map<String, Object> handleUpdate(final Statement statement) throws SQLException {
        final Map<String, Object> row = new HashMap<>();
        row.put("UPDATE_COUNT", statement.getUpdateCount());
        return row;
    }
    
    private void handleSelect(final Statement statement, final List<Map<String, Object>> result) throws SQLException {
        final ResultSet resultSet = statement.getResultSet();
        final ResultSetMetaData resultSetMetaData = resultSet.getMetaData();
        while (resultSet.next()) {
            final Map<String, Object> row = new HashMap<>();
            for (int i = 1; i <= resultSetMetaData.getColumnCount(); i++) {
                row.put(resultSetMetaData.getColumnName(i), resultSet.getObject(i));
            }
            result.add(row);
        }
    }
    
    public static void main(String[] args) throws Exception {
        new App().run();
    }
    
}
